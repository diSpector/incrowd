// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/diSpector/incrowd.git/internal/models/domain"
	mock "github.com/stretchr/testify/mock"
)

// ServerStorage is an autogenerated mock type for the ServerStorage type
type ServerStorage struct {
	mock.Mock
}

// GetArticleById provides a mock function with given fields: ctx, id
func (_m *ServerStorage) GetArticleById(ctx context.Context, id string) (*domain.Article, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleById")
	}

	var r0 *domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Article, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Article); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticles provides a mock function with given fields: ctx, limit, offset
func (_m *ServerStorage) GetArticles(ctx context.Context, limit int64, offset int64) ([]domain.Article, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetArticles")
	}

	var r0 []domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.Article, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.Article); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesCount provides a mock function with given fields: ctx
func (_m *ServerStorage) GetArticlesCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetArticlesCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerStorage creates a new instance of ServerStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerStorage {
	mock := &ServerStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
